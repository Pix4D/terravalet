# Install `task` from https://taskfile.dev
# Run `task --list` to start.

version: '3'

vars:
  GOTESTSUM:
    sh: "echo $(which gotestsum 2> /dev/null)"
  TESTRUNNER: "{{if .GOTESTSUM}}{{base .GOTESTSUM}} --{{else}}go test{{end}}"
  #
  GOLANGCI_VERSION: v1.55.2
  GOTESTSUM_VERSION: v1.11.0
  GOLINES_VERSION: v0.12.2

tasks:

  install:deps:
    desc: Install tool dependencies.
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@{{.GOLANGCI_VERSION}}
      - go install gotest.tools/gotestsum@{{.GOTESTSUM_VERSION}}
      - go install github.com/segmentio/golines@{{.GOLINES_VERSION}}
      - go install github.com/github-release/github-release@latest

  lint:
    desc: Lint the code.
    cmds:
      - golangci-lint run ./...

  lint:linelength:
    desc: Enforce max line length. Use the tool output only as a hint, sometimes it makes wrong decisions.
    cmds:
      - golines --max-len=99 --write-output .

  test:
    desc: Run all the tests (unit + integration). Use this target to get total coverage.
    cmds:
      - "{{.TESTRUNNER}} -count=1 -coverprofile=coverage.out ./..."

  browser:
    desc: "Show code coverage in browser (usage: task test:<subtarget> browser)"
    cmds:
      - go tool cover -html=coverage.out

  build:
    desc: Build the terravalet executable.
    cmds:
      - go build -o bin/terravalet -v -ldflags="{{.LDFLAGS}}" .
    vars: &build-vars
      FULL_VERSION:
        sh: git describe --tags --long --dirty --always
      LDFLAGS: -w -s -X main.fullVersion={{.FULL_VERSION}}

  #
  # usage: RELEASE_TAG=v0.1.0 gopass env gh/terravalet task release
  #
  release:
    desc: Build a release and upload to GitHub as draft. You need to transition
      from draft to published in the web UI.
    preconditions:
      - sh: test -n "$RELEASE_TAG"
        msg: "error: missing environment variable RELEASE_TAG"
      - sh: test -z $(git status --porcelain)
        msg: "error: git dirty"
      - sh: test -z $(git status --branch --porcelain | grep ahead)
        msg: "error: git local branch ahead"
    cmds:
      # - task: unit-test
      # We create the (local) git tag now, after having ran the unit tests and
      # before building the executables, so that we can embed this information
      # in the binaries.
      # To recover: delete local tag: git tag --delete tagname
      - git tag --annotate {{.RELEASE_TAG}} -m 'Release {{.RELEASE_TAG}}'
      - task: release-linux
      - task: release-darwin-amd
      - task: release-darwin-arm
      # - task: system-test
      - task: test
      # We create the release as a draft (that is: not visible to the public).
      # The act of "publishing" the release is left to a human from the web UI.
      - >
        github-release release
        --tag {{.RELEASE_TAG}}
        --draft
        --description
        "See the [CHANGELOG](https://github.com/$GITHUB_USER/$GITHUB_REPO/blob/{{.RELEASE_TAG}}/CHANGELOG.md)"

      #
      # Since 2024, if we upload immeditately after having created the draft release,
      # we get:
      #
      #   error: could not find the release corresponding to tag vX.Y.Z
      #
      # to avoid this, we sleep a moment :-/
      - sleep 2

      # Upload the artifacts.
      - >
        github-release upload
        --tag {{.RELEASE_TAG}}
        --name terravalet-linux-amd64.zip
        --file bin/linux/terravalet-linux-amd64.zip
      - >
        github-release upload
        --tag {{.RELEASE_TAG}}
        --name terravalet-darwin-amd64.zip
        --file bin/darwin/terravalet-darwin-amd64.zip
      - >
        github-release upload
        --tag {{.RELEASE_TAG}}
        --name terravalet-darwin-arm64.zip
        --file bin/darwin/terravalet-darwin-arm64.zip
      # Push the tag.
      - cmd: git push origin {{.RELEASE_TAG}}
      # Create a draft release.
      - cmd: |
          echo "Draft release $RELEASE_TAG created successfully."
          echo "Remember to publish it in the GitHub web UI https://github.com/$GITHUB_USER/$GITHUB_REPO/releases"
        silent: true
    env:
      GITHUB_USER: pix4d
      GITHUB_REPO: terravalet
      # GITHUB_TOKEN expected to be set securely via `gopass` or equivalent
  release-linux:
    cmds:
      - go build -o bin/$GOOS/terravalet -v -ldflags="{{.LDFLAGS}}" .
      - cd bin/$GOOS && zip terravalet-$GOOS-$GOARCH.zip terravalet
    env:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64
    vars: *build-vars
  release-darwin-amd:
    cmds:
      - go build -o bin/$GOOS/terravalet -v -ldflags="{{.LDFLAGS}}" .
      - cd bin/$GOOS && zip terravalet-$GOOS-$GOARCH.zip terravalet
    env:
      CGO_ENABLED: 0
      GOOS: darwin
      GOARCH: amd64
    vars: *build-vars
  release-darwin-arm:
    cmds:
      - go build -o bin/$GOOS/terravalet -v -ldflags="{{.LDFLAGS}}" .
      - cd bin/$GOOS && zip terravalet-$GOOS-$GOARCH.zip terravalet
    env:
      CGO_ENABLED: 0
      GOOS: darwin
      GOARCH: arm64
    vars: *build-vars
